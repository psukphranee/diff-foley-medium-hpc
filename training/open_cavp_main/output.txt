Home directory: /Users/920753844
INFO:root:Running with a single process. Device cpu.
2025-03-10,18:23:47 | INFO | Running with a single process. Device cpu.
INFO:root:Line 219 of main_wds_intra_contrast.py
2025-03-10,18:23:47 | INFO | Line 219 of main_wds_intra_contrast.py
INFO:root:Loaded audio_contrastive_pretrained model config.
2025-03-10,18:23:47 | INFO | Loaded audio_contrastive_pretrained model config.
INFO:root:Panya: Loading model CLIP_Video_Spec in stage 1.
2025-03-10,18:23:47 | INFO | Panya: Loading model CLIP_Video_Spec in stage 1.
Panya: Loading model CLIP_Video_Spec in stage 1.
Video Pretrained: True  Audio Pretrained: True
/Users/920753844/Diff-Foley/training/open_cavp_main/src/open_clip/model.py:578: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  state_dict = torch.load(ckpt_path)['state_dict']
====> Load Pretrained Video Encoder Success from: /Users/920753844/Diff-Foley/training/open_cavp_main/src/pretrained_model/slowonly_r50_4x16x1_256e_8xb16_kinetics400-rgb_20220901-f6a40d08.pth
/Users/920753844/Diff-Foley/training/open_cavp_main/src/open_clip/model.py:590: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  state_dict = torch.load(ckpt_path)['model']
Traceback (most recent call last):
  File "<frozen runpy>", line 198, in _run_module_as_main
  File "<frozen runpy>", line 88, in _run_code
  File "/Users/920753844/Diff-Foley/training/open_cavp_main/src/training/main_wds_intra_contrast.py", line 467, in <module>
    main(sys.argv[1:])
  File "/Users/920753844/Diff-Foley/training/open_cavp_main/src/training/main_wds_intra_contrast.py", line 220, in main
    model, preprocess_train, preprocess_val = create_model_and_transforms_video_spec(
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/920753844/Diff-Foley/training/open_cavp_main/src/open_clip/factory.py", line 392, in create_model_and_transforms_video_spec
    model = create_model_video_spec(
            ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/920753844/Diff-Foley/training/open_cavp_main/src/open_clip/factory.py", line 581, in create_model_video_spec
    model = CLIP_Video_Spec(args=args, **model_cfg, cast_dtype=cast_dtype)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/920753844/Diff-Foley/training/open_cavp_main/src/open_clip/model.py", line 590, in __init__
    state_dict = torch.load(ckpt_path)['model']
                 ^^^^^^^^^^^^^^^^^^^^^
  File "/Users/920753844/diff-foly-env-new/lib64/python3.11/site-packages/torch/serialization.py", line 1114, in load
    return _legacy_load(
           ^^^^^^^^^^^^^
  File "/Users/920753844/diff-foly-env-new/lib64/python3.11/site-packages/torch/serialization.py", line 1348, in _legacy_load
    result = unpickler.load()
             ^^^^^^^^^^^^^^^^
  File "/Users/920753844/diff-foly-env-new/lib64/python3.11/site-packages/torch/serialization.py", line 1281, in persistent_load
    obj = restore_location(obj, location)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/920753844/diff-foly-env-new/lib64/python3.11/site-packages/torch/serialization.py", line 414, in default_restore_location
    result = fn(storage, location)
             ^^^^^^^^^^^^^^^^^^^^^
  File "/Users/920753844/diff-foly-env-new/lib64/python3.11/site-packages/torch/serialization.py", line 391, in _deserialize
    device = _validate_device(location, backend_name)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/920753844/diff-foly-env-new/lib64/python3.11/site-packages/torch/serialization.py", line 364, in _validate_device
    raise RuntimeError(f'Attempting to deserialize object on a {backend_name.upper()} '
RuntimeError: Attempting to deserialize object on a CUDA device but torch.cuda.is_available() is False. If you are running on a CPU-only machine, please use torch.load with map_location=torch.device('cpu') to map your storages to the CPU.
I0310 18:23:48.278000 140620606932608 torch/_dynamo/utils.py:335] TorchDynamo compilation metrics:
I0310 18:23:48.278000 140620606932608 torch/_dynamo/utils.py:335] Function    Runtimes (s)
I0310 18:23:48.278000 140620606932608 torch/_dynamo/utils.py:335] ----------  --------------
E0310 18:23:48.986000 139757145466496 torch/distributed/elastic/multiprocessing/api.py:833] failed (exitcode: 1) local_rank: 0 (pid: 426354) of binary: /Users/920753844/diff-foly-env-new/bin/python
Traceback (most recent call last):
  File "/Users/920753844/diff-foly-env-new/bin/torchrun", line 8, in <module>
    sys.exit(main())
             ^^^^^^
  File "/Users/920753844/diff-foly-env-new/lib64/python3.11/site-packages/torch/distributed/elastic/multiprocessing/errors/__init__.py", line 348, in wrapper
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "/Users/920753844/diff-foly-env-new/lib64/python3.11/site-packages/torch/distributed/run.py", line 901, in main
    run(args)
  File "/Users/920753844/diff-foly-env-new/lib64/python3.11/site-packages/torch/distributed/run.py", line 892, in run
    elastic_launch(
  File "/Users/920753844/diff-foly-env-new/lib64/python3.11/site-packages/torch/distributed/launcher/api.py", line 133, in __call__
    return launch_agent(self._config, self._entrypoint, list(args))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/920753844/diff-foly-env-new/lib64/python3.11/site-packages/torch/distributed/launcher/api.py", line 264, in launch_agent
    raise ChildFailedError(
torch.distributed.elastic.multiprocessing.errors.ChildFailedError: 
============================================================
src.training.main_wds_intra_contrast FAILED
------------------------------------------------------------
Failures:
  <NO_OTHER_FAILURES>
------------------------------------------------------------
Root Cause (first observed failure):
[0]:
  time      : 2025-03-10_18:23:48
  host      : n1.hpc.at.sfsu.edu
  rank      : 0 (local_rank: 0)
  exitcode  : 1 (pid: 426354)
  error_file: <N/A>
  traceback : To enable traceback see: https://pytorch.org/docs/stable/elastic/errors.html
============================================================
